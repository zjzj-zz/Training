class CommonTabBar extends StatefulWidget {
  final List<String> tabs;
  final ValueChanged<int> onTabSelected;
  final int initialIndex;

  const CommonTabBar({
    super.key,
    required this.tabs,
    required this.onTabSelected,
    this.initialIndex = 0,
  });

  @override
  State<CommonTabBar> createState() => _CommonTabBarState();
}

class _CommonTabBarState extends State<CommonTabBar> with SingleTickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(
      length: widget.tabs.length,
      vsync: this,
      initialIndex: widget.initialIndex,
    );
    _tabController.addListener(() {
      if (_tabController.indexIsChanging) {
        widget.onTabSelected(_tabController.index);
      }
    });
  }

  @override
  void didUpdateWidget(CommonTabBar oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.tabs.length != widget.tabs.length) {
      _tabController.dispose();
      _tabController = TabController(
        length: widget.tabs.length,
        vsync: this,
        initialIndex: widget.initialIndex,
      );
    }
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return TabBar(
      controller: _tabController,
      isScrollable: true,
      indicatorColor: Colors.red,
      labelColor: Colors.red,
      unselectedLabelColor: Colors.grey,
      tabs: widget.tabs.map((label) => Tab(text: label)).toList(),
    );
  }
}



import 'package:flutter/material.dart';

class SelectableTabBar extends StatefulWidget {
  final List<String> tabs;
  final ValueChanged<int>? onChanged;

  const SelectableTabBar({
    super.key,
    required this.tabs,
    this.onChanged,
  });

  @override
  State<SelectableTabBar> createState() => _SelectableTabBarState();
}

class _SelectableTabBarState extends State<SelectableTabBar> {
  int _selectedIndex = 0;

  void _onTap(int index) {
    setState(() {
      _selectedIndex = index;
    });
    widget.onChanged?.call(index);
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      children: widget.tabs.asMap().entries.map((entry) {
        final index = entry.key;
        final label = entry.value;
        final isSelected = index == _selectedIndex;

        return Expanded(
          child: GestureDetector(
            onTap: () => _onTap(index),
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              padding: const EdgeInsets.symmetric(vertical: 12),
              margin: const EdgeInsets.symmetric(horizontal: 4),
              decoration: BoxDecoration(
                color: isSelected ? Colors.red : Colors.transparent,
                borderRadius: BorderRadius.circular(12),
                border: isSelected
                    ? Border.all(color: Colors.red)
                    : Border.all(color: Colors.transparent),
              ),
              child: Center(
                child: Text(
                  label,
                  style: TextStyle(
                    color: isSelected ? Colors.white : Colors.red,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),
          ),
        );
      }).toList(),
    );
  }
}

@override
Widget build(BuildContext context) {
  return Container(
    color: Colors.grey[200], // ← ここでライトグレー背景を設定
    padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 4), // 任意でパディング
    child: Row(
      children: widget.tabs.asMap().entries.map((entry) {
        final index = entry.key;
        final label = entry.value;
        final isSelected = index == _selectedIndex;

        return Expanded(
          child: GestureDetector(
            onTap: () => _onTap(index),
            child: AnimatedContainer(
              duration: const Duration(milliseconds: 200),
              padding: const EdgeInsets.symmetric(vertical: 12),
              margin: const EdgeInsets.symmetric(horizontal: 4),
              decoration: BoxDecoration(
                color: isSelected ? Colors.red : Colors.transparent,
                borderRadius: BorderRadius.circular(12),
                border: isSelected
                    ? Border.all(color: Colors.red)
                    : Border.all(color: Colors.transparent),
              ),
              child: Center(
                child: Text(
                  label,
                  style: TextStyle(
                    color: isSelected ? Colors.white : Colors.red,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ),
          ),
        );
      }).toList(),
    ),
  );
}